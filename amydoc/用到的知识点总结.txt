1、queue 和 deque的区别？
    deque：迪克，双向队列

    1、队列的常用操作
         	    抛出异常	        返回特殊值（null）
        插入	add(e)	        offer(e)
        移除	remove()	    poll()
        检查	element()	    peek()

        总结一下：常规的单词都是抛出异常，不常见的单词反倒是返回null。
    2、Queue常用方法：
        boolean add(E e);
            将指定的元素插入此队列（如果立即可行且不会违反容量限制），在成功时返回 true，
            如果当前没有可用的空间，则抛出 IllegalStateException。
        boolean offer(E e);
            将指定的元素插入此队列（如果立即可行且不会违反容量限制），当使用有容量限制的队列时，
            此方法通常要优于 add(E)，后者可能无法插入元素，而只是抛出一个异常。
        E remove();获取并移除此队列的头。如果没有抛出异常
        E poll();获取并移除此队列的头，如果此队列为空，则返回 null。
            poll：也有获得的意思。
        E element();获取，但是不移除此队列的头。
        E peek();获取但不移除此队列的头；如果此队列为空，则返回 null。
            peek：偷窥，偷看的意思，只得到值，但是我并不取出。


    3、deque
        双向队列(Deque),是Queue的一个子接口
        双向队列是指该队列【两端的元素】【既能入队(offer)】【也能出队(poll)】,
        如果将Deque限制为只能从一端入队和出队，则可实现栈的数据结构。
        对于栈而言，有入栈(push)和出栈(pop)，遵循先进后出原则。

        一个线性 collection，支持在两端插入和移除元素。
        名称 deque 是“double ended queue（双端队列）”的缩写，通常读为“deck”

        下表总结了上述 12 种方法：

                第一个元素（头部）	            最后一个元素（尾部）
                抛出异常	特殊值	                抛出异常	特殊值
        插入	addFirst(e)	offerFirst(e)	    addLast(e)	offerLast(e)
        移除	removeFirst()	pollFirst()	    removeLast()	pollLast()
        检查	getFirst()	peekFirst()	        getLast()	peekLast()


        双端队列也可用作 LIFO（后进先出）堆栈。应优先使用此接口而不是遗留 Stack 类。
        在将双端队列用作堆栈时，元素被推入双端队列的开头并从双端队列开头弹出。
        堆栈方法完全等效于 Deque 方法，如下表所示：

        堆栈方法	等效 Deque 方法
        push(e)	addFirst(e)
        pop()	removeFirst()
        peek()	peekFirst()

2、SpscLinkedArrayQueue
    SpscLinkedArrayQueue的数据结构主要神奇在它既不是传统的数组，又不是传统的链表，而是数组+链表。

3、Future.cancel(boolean)
    用于取消异步的任务，它传入一个boolean类型的参数，表示是否要终止正在执行的任务。
    传入true会中断线程并停止正在执行的任务。
    传入false则会让线程正常执行至完成，然后取消该线程。

    创建了Future实例，任务有以下三种状态：
        1、等待状态
            此时调用cancel()方法不管传入true还是false都会标记为取消，任务依然保存在任务队列中，但当轮到此任务运行时会直接跳过。
        2、完成状态
            此时cancel()不会起任何作用，因为任务已经完成了。
        3、正在运行中
            传入true打断当前正在执行的任务，传入false让当前线程执行完毕，在打断当前线程

    1、实战（WorkerTask#setFuture）
        boolean async = thread != Thread.currentThread();
        if (FUTURE.compareAndSet(this, f, async ? ASYNC_CANCELLED : SYNC_CANCELLED)) {
        	if (f != null) {
        		f.cancel(async);
        	}
        	break;
        }
	    其中：SYNC_CANCELLED，表示在同一个线程中取消
	    ASYNC_CANCELLED：表示在另一个线程中取消

	    1、问题
	        为啥同步状态 设置为cancel(false)，异步状态设置为f.cancel(true)。
	    2、知识点
	        这里用到了打断一个线程的知识点。
	        如果线程进入阻塞状态的时候，会终止正在运行的
	    3、解答
	        因为在同一个线程中，你设置true也是不起作用的，也会等到任务执行完毕，线程才关闭。

	        一个线程进入了另一个线程中，说明当前线程被阻塞了。
	        设置cancel(true)，是可以结束一个正在运行的线程。

3、AtomicXXXFieldUpdater用法与好处
    这里以AtomicReferenceFieldUpdater为例

    作用：更新被volatile修饰的属性。

    //在多线程环境下频繁更新的属性
    volatile Future<?> future;

    创建属性更新器
        参数1 ：更新字段所在类的类型
        参数2 ：更新字段的类型
        参数3 ：更新的目标字段
	static final AtomicReferenceFieldUpdater<PeriodicSchedulerTask, Future> FUTURE =
			AtomicReferenceFieldUpdater.newUpdater(PeriodicSchedulerTask.class, Future.class, "future");

    常用的方法：
        //【原子更新】指定对象的指定字段的值，当当前值等于预期值时，则用update更新该值，成功返回true<br>
        public final boolean compareAndSet(T obj, V expect, V update);

        //将给定对象的指定字段设置为指定值<br>
         public final void set(T obj, V newValue);<br>

        //原子更新指定对象的指定字段的值<br>
        public abstract boolean weakCompareAndSet(T obj, V expect, V update);<br>

        //将给定对象的指定字段更新为指定值，与set不同的是，该方法不会立刻修改旧值，而是会延迟一些<br>
        public final void lazySet(T obj, V newValue);<br>

        //获取此更新器管理的指定对象的字段的当前值<br>
        public final V get(T obj);<br>

        //原子更新该更新器管理的指定对象的字段的值为newValue，返回旧值<br>
        public V getAndSet(T obj, V newValue);<br>

        原子更新更新器管理的指定对象的值，newValue为updateFunction的apply方法返回的值<br>
        public final V updateAndGet(T obj, UnaryOperator<V> updateFunction);<br>

        //通过给定值和当前值计算新值，进行原子更新，返回旧值
        public final V getAndAccumulate(T obj, V x,BinaryOperator<V> accumulatorFunction);<br>

        //与上一个方法相同，不同在于返回新值
        public final V accumulateAndGet(T obj, V x,BinaryOperator<V> accumulatorFunction);<br>

    为啥要用该类呢？
        因为该类效率更高。
        使用compareAndSet 代替volatile 的内存屏障

3.1、compareAndSet()
    在AtomicInteger.java里，CAS是这么被实际应用的，就拿里头的自增函数来说：

    public final int incrementAndGet() {
        for (;;) {
            int current = get();
            int next = current + 1;
            if (compareAndSet(current, next))
                return next;
        }
    }

    就是在native函数里，判断当前对象和期望的expect（也就是前面的current）是否一致，如果一致则返回true
    public final boolean compareAndSet(int expect, int update) {
        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
    }

    我的总结：
        就是轮询compareAndSet方法。
        如果某个值变成了期望的值，那么就返回true。
        比如：我执行1 + 1

        我期望是2，如果去更新的值变成2了，那么就返回true。

    故而：WorkerTask中如下代码可以理解。
        如果当前类中【f 对象】 变成了 【FINISHED 对象】，返回true。
        if (f == SYNC_CANCELLED || f == ASYNC_CANCELLED || FUTURE.compareAndSet(this, f, FINISHED)) {
    	    break;
    	}

4、ScheduledExecutorService（延迟/周期执行线程池）
    scheduled a. 1.预定的；预定时间的 2.事先安排的 3.按时间表的，定期的
    特别注意：有周期性的意思。
    Scheduler：调度器

    ScheduledExecutorService：https://blog.csdn.net/wangmx1993328/article/details/80840598
    ThreadPoolExecutor：https://blog.csdn.net/wangmx1993328/article/details/80622181

    Scheduled Start Date 预计开始日期
    scheduled date 指定日期
    Scheduled Finish Date 预计完成日期
    scheduled start tine 【计】 预定开始时间
    scheduled completion date 计划完工日期
    early start date 最早开始时间
    late start date 最晚开始时间
    be scheduled to vt.预定
    as scheduled 按照原定计划,按时
    be scheduled for 订于…,定于…

    可安排在给定的延迟后运行或定期执行的命令。
    schedule 方法使用各种延迟创建任务，并返回一个可用于取消或检查执行的任务对象
    scheduleAtFixedRate 和 scheduleWithFixedDelay 方法创建并执行某些在取消前一直定期运行的任务
    所有的 schedule 方法都接受相对延迟和周期作为参数，而不是绝对的时间或日期
    SheduleExecutorService 是JDK 1.5出来的，比以前的Timer性能好


5、获取堆栈信息。
    参考：Traces#SharedSecretsCallSiteSupplierFactory#TracingException#get
    参考：https://blog.csdn.net/yums467/article/details/53005292
    1、SharedSecrets
    2、JavaLangAccess
    通过如上两个类，可以获取调用栈的所有的堆栈信息。
    可以获取栈帧中的所有实例对象的类名称。
    我的总结：主要可以获取StackTraceElement对象，这样就获取了栈信息。

    SharedSecrets和JavaLangAccess，通过这两个类来获取Java栈帧中存储的类信息，然后进行挑选，从而找出调用的类。


    剔除不可能的调用类
        该方法可以获取整个调用栈。
        但是有些的调用栈是不需要输出来的
        比如:框架自身的调用栈。
        还要排除在获取栈帧过程中和日志框架使用过程中的额外引入的类，
        像java.lang.reflect.*和sun.reflect.＊这些类都是额外引入的类，不会是调用类。


    用法如下：
        public void testPrint() {
            JavaLangAccess access = SharedSecrets.getJavaLangAccess();
            Throwable throwable = new Throwable();

            int depth = access.getStackTraceDepth(throwable);

            //输出JVM栈帧中的所有类实例
            for (int i = 0; i < depth; i++) {
                StackTraceElement frame = access.getStackTraceElement(throwable, i);
                System.out.println(frame);
            }
        }





