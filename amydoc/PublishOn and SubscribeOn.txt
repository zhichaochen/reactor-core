参考：https://www.jianshu.com/p/769f6e9824fb

开启多线程去执行上游的算子发送下来的元素。
FluxPublishOn：对他下面的算子开启多线程执行。
典型应用
    有的算子处理任务快，有的算子处理任务慢，（算子使用的算法不同）
    如果将所有的算子都放在同一个线程中执行，难免导致阻塞。
    FluxPublishOn：相当于起了个中间商的作用。让上游的元素进入他的queue中。


1、概述
2、作用
    publishOn 和 subscribeOn。这两个方法的作用是【指定执行 Reactive Streaming 的 Scheduler】（可理解为线程池）。
    我的总结：
        publishOn：指定下游算子消费上游算子的数据的线程池。
        subscribeOn：指定request(n)的线程池。

    为何需要指定Scheduler 呢？？？
        组成一个反应式流的代码有快有慢，例如 NIO、BIO。
        如果将这些功能都放在一个线程池里执行，快的就会被慢的影响，所以需要相互隔离。
        这是这两个方法应用的最典型的场景。

    我的理解:如果某个线程太慢，资源得不到及时释放，那么就会影响其他的
    这是线程池隔离的作用。

3、两者的区别
    publishOn 影响在【其之后的 operator】 执行的线程池，
    而 subscribeOn 则会【从源头影响整个执行过程】。

    所以，publishOn 的影响范围和它的位置有关，而 subscribeOn 的影响范围则和位置无关。


4、实际用途
    这里介绍 publishOn 和 subscribeOn 的一种实际用途，那就是反应式编程和传统的，会导致线程阻塞的编程技术混用的场景。
    其实开头两个例子已经解释了这个场景。

    在第一个 publishOn 的例子中，
        repository::save 会导致线程阻塞，为了避免造成对其它反应式操作的影响，便使用 publishOn 改变其执行线程。

    在第二个 subscribeOn 的例子中，
        repository.findAll() 会导致线程阻塞。但是其是源头的 publisher，因此不能使用 publishOn 改变其 执行线程。
        这时就需要使用 subscribeOn，在源头上修改其执行线程。

    这样，通过 publishOn 和 subscribeOn 就在反应式编程中实现了线程池隔离的目的，
    一定程度上避免了会导致线程阻塞的程序执行影响到反应式编程的程序执行效率。

5、局限性
    使用 publishOn 和 subscribeOn 只能在一定程度上避免反应式编程代码执行的效率被影响。
    因为用来隔离的线程池资源终归是有限的，比如当出现数据库资源不足、慢查询等问题时，对应的线程池资源如果被耗尽，
    还是会使整个反应式编程的执行效率受到影响。

    目前，Redis、Mongo、Couchbase 等非关系型数据库均有相应的反应式编程的解决方案，但是关系型数据库却没有理想的方案。
    一个重要原因是 JDBC 本身就是一个阻塞式的 API，根本不可能让其适应反应式编程。
    因此需要一个新的方案。目前 Oracle 正在推动 ADBA (Asynchronous Database Access API)，
    使得关系型数据库可以满足异步编程的需要。但是，因为是 Oracle 主导，大家都懂的，所以目前前景还不是很明朗。

    另外一个技术方案是 Spring 推动的 R2DBC，从名字上来看就很像是 JDBC 在反应式编程领域的对应的解决方案。
    目前可以支持 PostgreSQL，支持 MySQL 目前还尚需时日。

