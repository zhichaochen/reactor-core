总的执行步骤
    1、source，
        记录每个
        作用：
    2、subscribe() 或者 subscribeOrReturn
        其中，好像最后一个算子，和第一个算子使用的是subscribe()方法，
        中间的算子都是实现InternalFluxOperator中的subscribeOrReturn的方法。
    3、onSubscribe()(从上到下)
        在第一个算子之后，例如：FluxArray#subscribe，开始执行onSubscribe操作。
        作用：
    4、request(n);(从下到上)
        下游请求上游数据
        作用：执行背压。

    5、onNext、onError、onComplete(从上到下。)
        在第一个算子的request中，例如FluxArray，调用onNext等操作。
        如果有报错：将错误一级一级的传下去，直到最后一个订阅者，
        如果完成，将错误一级一级的传下去，直到最后一个订阅者。
            默认：LambdaSubscriber，可以自己在subscribe()方法中定义。


官方参考文档地址：http://projectreactor.io/docs/core/release/reference/
中文翻译文档地址：http://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html
中文翻译源码地址：https://github.com/get-set/reactor-core/tree/master-zh/src/docs/asciidoc
0、操作
    Flux.range(1, 10)
				.map(x -> x + 1)
				.take(3)
				.filter(x -> x != 1)
				.subscribe(System.out::println);

1、总结
    request：表示背压，下游调用上游元素的个数。默认是Long.MAX_VALUE
        即使请求Long.MAX_VALUE个元素，但也是onNext一个个的执行下去。

    publishOn：异步执行某个算子的任务。
    subscribeOn：异步去request请求上游数据

    多个线程如何交互，如何一起终止，参见WorkerTask类。

    Subscription：的生命周期是订阅者对发布者的一次订阅。订阅之后就会设置为已删除状态。

    1、调用链的开头，中间算子
        SourceProducer：接口表示，只能放在调用链的开头，表示开头的算子。
        InternalFluxOperator、InnerOperator：表示，只能放在调用链的中间。表示中间的算子。

        且：在头的算子才会调用subscribe方法。然后执行onSubscribe的逻辑。

        实现原理：
            能打头的算子在Flux中提供了static方法。可以直接通过Flux.XXX进行调用。
            不能打头的提供实例方法，只能通过，new对象进行调用。

    2、subscribe()方法，默认创建的是LambdaSubscriber。
        如果我们没有在.subscribe()中，定义自己的订阅者，那么默认创建的是LambdaSubscriber，
        详情参考.subscribe()方法的调用链。

1、多个算子如何实现上游可以调用下游，同时，下游也调用上游的？
    参见Flux#subscribe(Subscriber<? super T> actual) 方法。

    切记：多个子对象使用super 给抽象的父类的属性赋值，通过子类的对象，能获取到自己的赋值。

    1、在创建算子的时候，建立了上游算子其下游算子的关系。
        例如：在创建new FluxMapFuseable 的时候记录了FluxRangeFuseable算子
        源码如下：
            public final <V> Flux<V> map(Function<? super T, ? extends V> mapper) {
                if (this instanceof Fuseable) {

                    1、因为在Flux对象中，此时的Flux对象还表示FluxRangeFuseable。
                    2、在new FluxMapFuseable的时候，在其构造方法中
                        通过 super(source) 将其 记录在 FluxOperator 中的 source属性中。
                        这样FluxMapFuseable 算子 就记录了其上游的算子FluxRangeFuseable
                    3、在onAssembly执行return source 之后，该Flux 的this 才会表示为FluxMapFuseable

                    return onAssembly(new FluxMapFuseable<>(this, mapper));
                }
                return onAssembly(new FluxMap<>(this, mapper));
            }

    2、建立算子之间的订阅关系。
        在：Flux#subscribe 中建立了 订阅者和其订阅者的关系（下游的算子的订阅者会订阅上游的算子）
        所以，上游的订阅者中的actual 是 下游的订阅者。表示之间的关系。

        参见原文分析
        订阅者的_actual 对象就是其订阅的算子

    总结：
        通过FluxXXX算子的父类 InternalFluxOperator#nextOptimizableSource的方法能获取 上游的算子
        通过FluxXXX算子的订阅者，能访问到下游的算子，这样就上下都能访问了。

2、订阅时候调用链
    在调用.subscribe方法中，会建立算子之间订阅关系。
    首先需要明确，一个订阅者【记录了其下游的订阅者】。。比如：FluxMapFuseable  记录了 TakeFuseableSubscriber
    下游算子订阅了上游


    FilterFuseableSubscriber 中的actual 是：lambdaSubscriber，故而，
    onSubscribe：上游订阅者调用下游订阅者。
    LambdaSubscriber ：是转折点。
    wip：记录调用个数。


4、如何进行线程切换
    因为publishOn的出现，涉及到了线程切换的问题。
    比如：
        map算子的由一个线程执行
        filter算子的由另一个线程执行。
        这分别属于不同的线程，那么需要在线程间进行切换。

5、如何异步消费数据（即publishOn原理）
    publishOn原理：
        1、上游数据发送到 FluxPublishOn#onNext中
        2、在onNext中将数据存入Queue中，而不是继续往下。
        3、在onNext中会用trySchedule()方法开启线程，
        4、开启的线程会调用FluxPublishOn#run方法执行任务
        =========
        5、异步执行（特别注意）
            FluxPublishOn#onNext 中，每个onNext都会开启一个线程。
            故而：
            在run（runSync 或 runAsync）中，才真正的调用【下一个算子的onNext】方法。
            故而：
            多个线程去消费上游数据，下游的多个线程去执行onNext。
        6、在FluxPublishOn#onComplete方法中，销毁该算子创建的线程。

        经过publishOn之后，就变成了多个线程。
        数据先缓存在FluxPublishOn的queue中，然后再开启多个线程去消费queue中的数据。

6、工作窃取
    上游的生产者，将元素生产到 queue中，下游的线程去消费。
    那个线程完成就继续去queue中进行消费，这本身就是工作窃取的实现方式。
    参考FluxPublishOn

7、怎么理解ParallelScheduler
    1、在项目启动的时候，初始化线程池。
        每一次调用接口发送数据，都可以去请求开启线程。

8、Hot vs Cold
    冷发布者：在【订阅的时候才会发生】， 在【订阅之前什么都不会发生】。
    热发布者：

    hot and cold的实现原理。

9、关于日志的处理
    1、开启调试模式（调试模式是全局的）
        Hooks.onOperatorDebug();
        调试模式是全局性的，会影响到程序中每一个组装到一个 Flux 或 Mono 的操作符。

    2、checkpoint：在出错的时候，打印错误堆栈信息。

        相比全局调试模式，它只打印加在链上。
        checkpoint()：
            默认打印stack trace信息。
        checkpoint(String)：
            默认省略 stack trace信息，只打印错误日志，可以有更低的成本。
        checkpoint("description", true)
            可以自己控制是否打印stack trace信息。

        参数1：定位描述符，可以帮助定位到组装点。一个日志的识别信息。
        参数2：控制是否打印堆栈信息。

        例如：

    3、log：输出日志信息（注意：需要配置backlog）
        我的总结：会记录上游算子，对下游的操作日志。

        它会读（只读，peek）每一个 在【其上游的】 Flux 或 Mono 【事件】
        （包括 onNext、onError、 onComplete， 以及 订阅、 取消、和 请求）。

        log()
        log(String)

        例如：
        Flux<Integer> flux = Flux.range(1, 10)
                                 .log()
                                 .take(3);

        其中：
            reactor.Flux.Range.1 是自动生成的日志 类别（category），以防你在操作链中多次使用 同一个操作符。
            通过它你可以分辨出来是哪个操作符的事件（这里是 range 的）。

            你可以调用 log(String) 方法用自定义的类别替换这个标识符。
            在几个用于分隔的字符之后， 打印出了实际的事件

        输出如下（通过 logger 的 console appender）：

        10:45:20.200 [main] INFO  reactor.Flux.Range.1 - | onSubscribe([Synchronous Fuseable] FluxRange.RangeSubscription)
        10:45:20.205 [main] INFO  reactor.Flux.Range.1 - | request(unbounded)
        10:45:20.205 [main] INFO  reactor.Flux.Range.1 - | onNext(1)
        10:45:20.205 [main] INFO  reactor.Flux.Range.1 - | onNext(2)
        10:45:20.205 [main] INFO  reactor.Flux.Range.1 - | onNext(3)
        10:45:20.205 [main] INFO  reactor.Flux.Range.1 - | cancel()

9.1、checkpoint实现原理
    checkpoint算子会创建FluxOnAssembly对象。
    1、当上游发生错误catch到异常之后，向下传递。
    2、向下传递途中，会经过FluxOnAssembly 中的订阅者OnAssemblySubscriber的onError方法。
    3、OnAssemblySubscriber#onError中封装堆栈信息，传递到LambdaSubscriber#onError
    4、LambdaSubscriber#onError，将错误信息处理后，输出。

9.2、log实现原理？
    1、创建SignalLogger对象，用于记录日志
    2、创建FluxLogFuseable的，在其中记录日志对象
    3、在subscribeOrReturn时候，创建PeekFuseableSubscriber订阅者，记录SignalLogger对象
        在调用各个算子声明周期的时候，通过SignalLogger对各个生命周期的逻辑，执行打印日志。









